
// P4 PD proto

// NOTE: This file is automatically created from the P4 program, do not modify manually.

syntax = "proto3";
package pdpi;

import "p4/v1/p4runtime.proto";
import "google/rpc/code.proto";
import "google/rpc/status.proto";

// PDPI uses the following formats for different kinds of values:
// - Format::IPV4 for IPv4 addresses (32 bits), e.g., "10.0.0.1".
// - Format::IPV6 for IPv6 addresses (128 bits) formatted according to RFC 5952.
//   E.g. "2001:db8::1".
// - Format::MAC for MAC addresses (48 bits), e.g., "01:02:03:04:aa".
// - Format::STRING for entities that the controller refers to by string, e.g.,
//   ports.
// - Format::HEX_STRING for anything else, i.e. bitstrings of arbitrary length.
//   E.g., "0x01ab".


// -- General definitions ------------------------------------------------------

// Ternary match. The value and mask are formatted according to the Format of the match field.
message Ternary {
  string value = 1;
  string mask = 2;
}

// LPM match. The value is formatted according to the Format of the match field.
message Lpm {
  string value = 1;
  int32 prefix_length = 2;
}

// Optional match. The value is formatted according to the Format of the match field.
message Optional {
  string value = 1;
}

// -- Tables -------------------------------------------------------------------

message IdTestTableEntry {
  message Match {
    string ipv6 = 1; // exact match / Format::IPV6
    string ipv4 = 2; // exact match / Format::IPV4
  }
  Match match = 1;
  message Action {
  oneof action {
    DoThing1Action do_thing_1 = 2;
    DoThing2Action do_thing_2 = 1;
  }
  }
  Action action = 2;
}

message ExactTableEntry {
  message Match {
    string normal = 1; // exact match / Format::HEX_STRING / 10 bits
    string ipv4 = 2; // exact match / Format::IPV4
    string ipv6 = 3; // exact match / Format::IPV6
    string mac = 4; // exact match / Format::MAC
    string str = 5; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    NoAction NoAction = 1;
  }
  Action action = 2;
}

message TernaryTableEntry {
  message Match {
    Ternary normal = 1; // ternary match / Format::HEX_STRING / 10 bits
    Ternary ipv4 = 2; // ternary match / Format::IPV4
    Ternary ipv6 = 3; // ternary match / Format::IPV6
    Ternary mac = 4; // ternary match / Format::MAC
  }
  Match match = 1;
  message Action {
    DoThing3Action do_thing_3 = 1;
  }
  Action action = 2;
  int32 priority = 3;
}

message Lpm1TableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    NoAction NoAction = 1;
  }
  Action action = 2;
}

message Lpm2TableEntry {
  message Match {
    Lpm ipv6 = 1; // lpm match / Format::IPV6
  }
  Match match = 1;
  message Action {
    NoAction NoAction = 1;
  }
  Action action = 2;
}

message WcmpTableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    DoThing1Action do_thing_1 = 2;
    int32 weight = 1;
  }
  repeated Action actions = 2;
}

message CountAndMeterTableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    CountAndMeterAction count_and_meter = 1;
  }
  Action action = 2;
  BytesMeterConfig meter_config = 4;
  int64 byte_counter = 6;
  int64 packet_counter = 7;
}

message Wcmp2TableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
  oneof action {
    DoThing1Action do_thing_1 = 2;
    DoThing2Action do_thing_2 = 3;
  }
    int32 weight = 1;
  }
  repeated Action actions = 2;
}

message OptionalTableEntry {
  message Match {
    Optional ipv6 = 1; // optional match / Format::IPV6
    Optional ipv4 = 2; // optional match / Format::IPV4
  }
  Match match = 1;
  message Action {
    DoThing1Action do_thing_1 = 1;
  }
  Action action = 2;
  int32 priority = 3;
}

message ReferredTableEntry {
  message Match {
    string id = 1; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
}

message ReferringTableEntry {
  message Match {
    string val = 1; // exact match / Format::HEX_STRING / 10 bits
  }
  Match match = 1;
  message Action {
    ReferringAction referring_action = 1;
  }
  Action action = 2;
}


// -- Actions ------------------------------------------------------------------

message DoThing1Action {
  string arg2 = 1; // Format::HEX_STRING / 32 bits
  string arg1 = 2; // Format::HEX_STRING / 32 bits
}

message DoThing2Action {
  string normal = 1; // Format::HEX_STRING / 10 bits
  string ipv4 = 2; // Format::IPV4
  string ipv6 = 3; // Format::IPV6
  string mac = 4; // Format::MAC
  string str = 5; // Format::STRING
}

message DoThing3Action {
  string arg1 = 1; // Format::HEX_STRING / 32 bits
  string arg2 = 2; // Format::HEX_STRING / 32 bits
}

message CountAndMeterAction {
}

message DoThing4Action {
}

message ReferringAction {
  string referring_id = 1; // Format::STRING
}

message NoAction {
}


// -- All tables ---------------------------------------------------------------

message TableEntry {
  oneof entry {
    IdTestTableEntry id_test_table_entry = 1;
    ExactTableEntry exact_table_entry = 2;
    TernaryTableEntry ternary_table_entry = 3;
    Lpm1TableEntry lpm1_table_entry = 4;
    Lpm2TableEntry lpm2_table_entry = 5;
    WcmpTableEntry wcmp_table_entry = 6;
    CountAndMeterTableEntry count_and_meter_table_entry = 7;
    Wcmp2TableEntry wcmp2_table_entry = 8;
    OptionalTableEntry optional_table_entry = 9;
    ReferredTableEntry referred_table_entry = 10;
    ReferringTableEntry referring_table_entry = 11;
  }
}


// -- Packet-IO ----------------------------------------------------------------

message PacketIn {
  bytes payload = 1;

  message Metadata {
    string ingress_port = 1; // Format::HEX_STRING / 10 bits
    string target_egress_port = 2; // Format::STRING
  }
  Metadata metadata = 2;
}
message PacketOut {
  bytes payload = 1;

  message Metadata {
    string egress_port = 1; // Format::STRING
    string submit_to_ingress = 2; // Format::HEX_STRING / 1 bits
  }
  Metadata metadata = 2;
}


// -- Meter configs ------------------------------------------------------------

message BytesMeterConfig {
  // Committed/peak information rate (bytes per sec).
  int64 bytes_per_second = 1;
  // Committed/peak burst size.
  int64 burst_bytes = 2;
}

message PacketsMeterConfig {
  // Committed/peak information rate (packets per sec).
  int64 packets_per_second = 1;
  // Committed/peak burst size.
  int64 burst_packets = 2;
}

// -- RPC messages -------------------------------------------------------------

// Describes an update in a Write RPC request.
message Update {
  // Required.
  p4.v1.Update.Type type = 1;
  // Required.
  TableEntry table_entry = 2;
}

// Describes a Write RPC request.
message WriteRequest {
  // Required.
  uint64 device_id = 1;
  // Required.
  p4.v1.Uint128 election_id = 2;
  // Required.
  repeated Update updates = 3;
}

// Describes the status of a single update in a Write RPC.
message UpdateStatus {
  // Required.
  google.rpc.Code code = 1;
  // Required for non-OK status.
  string message = 2;
}

// Describes the result of a Write RPC.
message WriteRpcStatus {
  oneof status {
    google.rpc.Status rpc_wide_error = 1;
    WriteResponse rpc_response = 2;
  }
}

// Describes a Write RPC response.
message WriteResponse {
  // Same order as `updates` in `WriteRequest`.
  repeated UpdateStatus statuses = 1;
}

// Read requests.
message ReadRequest {
  // Required.
  uint64 device_id = 1;
  // Indicates if counter data should be read.
  bool read_counter_data = 2;
  // Indicates if meter configs should be read.
  bool read_meter_configs = 3;
}

// A read request response.
message ReadResponse {
  // The table entries read by the switch.
  repeated TableEntry table_entries = 1;
}

