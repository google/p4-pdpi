// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pdpi;

import "google/rpc/code.proto";
import "google/rpc/status.proto";
import "p4/config/v1/p4info.proto";
import "p4/v1/p4runtime.proto";

// -- P4Info -------------------------------------------------------------------

// Describes the format of a value.
enum Format {
  // Hex string, e.g. 0x0a8b. All lowercase, and always of length
  // ceil(num_bits/4)+2 (1 character for every 4 bits, zero-padded to be
  // divisible by 4, and 2 characters for the '0x' prefix).
  HEX_STRING = 0;
  // MAC address, e.g. 00:11:ab:cd:ef:22. All lowercase, and always 17
  // characters long.
  MAC = 1;
  // IPv4 address, e.g. 10.0.0.2.
  IPV4 = 2;
  // IPv6 address, e.g. fe80::21a:11ff:fe17:5f80. All lowercase, formatted
  // according to RFC5952. This can be used for any bitwidth of 128 or less. If
  // the bitwidth n is less than 128, then by convention only the upper n bits
  // can be set.
  IPV6 = 3;
  // String format, only printable characters.
  STRING = 4;
}

// Describes a match field.
message IrMatchFieldDefinition {
  // Required. From P4Info.
  p4.config.v1.MatchField match_field = 1;
  // Required, the format of this field as deduced from the match field type
  // and annotations.
  Format format = 2;
}

// Describes a meter.
message IrMeter {
  // Required. Unit of the meter.
  p4.config.v1.MeterSpec.Unit unit = 1;
}

// Describes a counter
message IrCounter {
  // Required. Unit for the counter.
  p4.config.v1.CounterSpec.Unit unit = 1;
}

// Describes a foreign key. Usually attached to the parameter of an action.
message IrForeignKey {
  string table = 1;
  string match_field = 2;
}

// Describes a P4 table.
message IrTableDefinition {
  // Required. From P4Info.
  p4.config.v1.Preamble preamble = 1;
  // Required. Maps match field IDs to match fields.
  map<uint32, IrMatchFieldDefinition> match_fields_by_id = 2;
  // Required. Maps match field names to match fields.
  map<string, IrMatchFieldDefinition> match_fields_by_name = 3;
  // Required. The set of actions for this table usable by table entries.
  repeated IrActionReference entry_actions = 4;
  // Optional. These actions are only available for the default action.
  repeated IrActionReference default_only_actions = 5;
  // Required. Max number of entries in table.
  int64 size = 6;
  // Required. Does this table use one-shot action selector programming? Implies
  // that this is a WCMP table. Only oneshot WCMP tables are supported.
  bool uses_oneshot = 7;
  // Weight proto ID. Required for tables with is_wcmp == true, 0 otherwise.
  // Optional, only for WCMP tables.
  uint32 weight_proto_id = 8;
  // Optional. Meter configuration.
  IrMeter meter = 9;
  // Optional. Counter configuration.
  IrCounter counter = 10;
  // Optional. Constant default action for this table. Cannot be overridden.
  IrActionDefinition const_default_action = 11;
}

// Describes a reference to an action (from a table).
message IrActionReference {
  // Required. From P4Info.
  p4.config.v1.ActionRef ref = 1;
  // Required. The definition of this action.
  IrActionDefinition action = 2;
  // Required for non-default-only actions. Proto ID for this action reference.
  uint32 proto_id = 3;
}

// Describes an action definition.
message IrActionDefinition {
  // Describes an action parameter definition.
  message IrActionParamDefinition {
    // Required. From P4Info.
    p4.config.v1.Action.Param param = 1;
    // Required, the format of this parameter as deduced from the parameter type
    // and annotations.
    Format format = 2;
    // Optional. The set of foreign keys.
    repeated IrForeignKey foreign_keys = 3;
  }
  // Required. From P4Info.
  p4.config.v1.Preamble preamble = 1;
  // Required. Maps parameter IDs to parameters.
  map<uint32, IrActionParamDefinition> params_by_id = 2;
  // Required. Maps parameter names to parameters.
  map<string, IrActionParamDefinition> params_by_name = 3;
}

// Describes a packet-io metadata header.
message IrPacketIoMetadataDefinition {
  // Required. From P4Info.
  p4.config.v1.ControllerPacketMetadata.Metadata metadata = 1;
  // Required, the format of this parameter as deduced from the parameter type
  // and annotations.
  Format format = 2;
}

// Describes an entire P4 program.
message IrP4Info {
  // Required. Maps table IDs to tables.
  map<uint32, IrTableDefinition> tables_by_id = 1;
  // Required. Maps table names to tables.
  map<string, IrTableDefinition> tables_by_name = 2;
  // Required. Maps action IDs to actions.
  map<uint32, IrActionDefinition> actions_by_id = 3;
  // Required. Maps action names to actions.
  map<string, IrActionDefinition> actions_by_name = 4;
  // Required. Maps packet-in metadata IDs to metadata.
  map<uint32, IrPacketIoMetadataDefinition> packet_in_metadata_by_id = 5;
  // Required. Maps packet-in metadata names to metadata.
  map<string, IrPacketIoMetadataDefinition> packet_in_metadata_by_name = 6;
  // Required. Maps packet-out metadata IDs to metadata.
  map<uint32, IrPacketIoMetadataDefinition> packet_out_metadata_by_id = 7;
  // Required. Maps packet-out metadata names to metadata.
  map<string, IrPacketIoMetadataDefinition> packet_out_metadata_by_name = 8;
  // All foreign keys.
  repeated IrForeignKey foreign_keys = 9;
}

// -- Table entries ------------------------------------------------------------

// Describes a value.
message IrValue {
  // Required. Parallel to Format enum.
  oneof format {
    string hex_str = 1;
    string ipv4 = 2;
    string ipv6 = 3;
    string mac = 4;
    string str = 5;
  }
}

// Describes a match of a table entry
message IrMatch {
  // Required. The name of the field being matched on.
  string name = 1;

  message IrTernaryMatch {
    IrValue value = 1;
    IrValue mask = 2;
  }

  message IrLpmMatch {
    IrValue value = 1;
    int32 prefix_length = 2;
  }

  message IrOptionalMatch {
    IrValue value = 1;
  }

  // Required. Described the value being matched.
  oneof match_value {
    IrValue exact = 2;
    IrLpmMatch lpm = 3;
    IrTernaryMatch ternary = 4;
    IrOptionalMatch optional = 5;
  }
}

// Describes an invocation of table action, with a concrete set of parameters.
message IrActionInvocation {
  // Required, the name of the action that is invoked.
  string name = 1;

  // Describes a concrete value to be passed as a parameter.
  message IrActionParam {
    // Required, the name of the parameter.
    string name = 1;
    // Required, the value of the parameter.
    IrValue value = 2;
  }
  // Set of parameters for the action.
  repeated IrActionParam params = 2;
}

// Describes an action invocation of an action set.
message IrActionSetInvocation {
  // The actual action invocation.
  IrActionInvocation action = 1;
  // Required. Weight of this action. Must be positive.
  int32 weight = 2;
}

// Describes an action profile action set (for WCMP tables).
message IrActionSet {
  // Required. The set of actions.
  repeated IrActionSetInvocation actions = 1;
}

// Describes a table entry (matches, priority and action, plus some metadata).
message IrTableEntry {
  // Required, the name of the table this entry belong to.
  string table_name = 1;
  // Required, the set of matches.
  repeated IrMatch matches = 2;
  // The priority. 0 for tables with only exact matches, and required otherwise.
  int32 priority = 3;
  // Required, the action to be invoked.
  oneof type {
    IrActionInvocation action = 4;
    IrActionSet action_set = 5;
  }
  // Meter config (required for tables with a meter, absent otherwise).
  p4.v1.MeterConfig meter_config = 6;
  // Optional. Counter data.
  p4.v1.CounterData counter_data = 7;
  // Optional, the metadata from the controller.
  bytes controller_metadata = 8;
}

// -- Packet IO ----------------------------------------------------------------

// Describes a packet in.
message IrPacketIn {
  bytes payload = 1;
  repeated IrPacketMetadata metadata = 2;
}
// Describes a packet out.
message IrPacketOut {
  bytes payload = 1;
  repeated IrPacketMetadata metadata = 2;
}

// A single packet io metadata header.
message IrPacketMetadata {
  string name = 1;
  IrValue value = 2;
}

// -- RPC messages -------------------------------------------------------------

// Describes an update in a Write RPC request.
message IrUpdate {
  // Required.
  p4.v1.Update.Type type = 1;
  // Required.
  IrTableEntry table_entry = 2;
}

// Describes a Write RPC request.
message IrWriteRequest {
  // Required.
  uint64 device_id = 1;
  // Required.
  p4.v1.Uint128 election_id = 2;
  // Required.
  repeated IrUpdate updates = 3;
}

// Describes the status of a single update in a Write RPC.
message IrUpdateStatus {
  // Required.
  google.rpc.Code code = 1;
  // Required for non-OK status.
  string message = 2;
}

// Describes the result of a Write RPC.
message IrWriteRpcStatus {
  oneof status {
    google.rpc.Status rpc_wide_error = 1;
    IrWriteResponse rpc_response = 2;
  }
}

// Describes a Write RPC response.
message IrWriteResponse {
  // Same order as `updates` in `WriteRequest`.
  repeated IrUpdateStatus statuses = 1;
}

// Read requests.
message IrReadRequest {
  // Required.
  uint64 device_id = 1;
  // Indicates if counter data should be read.
  bool read_counter_data = 2;
  // Indicates if meter configs should be read.
  bool read_meter_configs = 3;
}

// A read request response.
message IrReadResponse {
  // The table entries read by the switch.
  repeated IrTableEntry table_entries = 1;
}
